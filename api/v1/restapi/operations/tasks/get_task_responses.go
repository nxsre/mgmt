// Code generated by go-swagger; DO NOT EDIT.

package tasks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/soopsio/mgmt/api/v1/models"
)

// GetTaskOKCode is the HTTP code returned for type GetTaskOK
const GetTaskOKCode int = 200

/*GetTaskOK 返回TaskID

swagger:response getTaskOK
*/
type GetTaskOK struct {

	/*
	  In: Body
	*/
	Payload *models.TaskState `json:"body,omitempty"`
}

// NewGetTaskOK creates GetTaskOK with default headers values
func NewGetTaskOK() *GetTaskOK {
	return &GetTaskOK{}
}

// WithPayload adds the payload to the get task o k response
func (o *GetTaskOK) WithPayload(payload *models.TaskState) *GetTaskOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task o k response
func (o *GetTaskOK) SetPayload(payload *models.TaskState) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetTaskDefault Unexpected error

swagger:response getTaskDefault
*/
type GetTaskDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetTaskDefault creates GetTaskDefault with default headers values
func NewGetTaskDefault(code int) *GetTaskDefault {
	if code <= 0 {
		code = 500
	}

	return &GetTaskDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get task default response
func (o *GetTaskDefault) WithStatusCode(code int) *GetTaskDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get task default response
func (o *GetTaskDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get task default response
func (o *GetTaskDefault) WithPayload(payload *models.Error) *GetTaskDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get task default response
func (o *GetTaskDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetTaskDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
