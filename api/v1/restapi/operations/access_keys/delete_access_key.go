// Code generated by go-swagger; DO NOT EDIT.

package access_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteAccessKeyHandlerFunc turns a function with the right signature into a delete access key handler
type DeleteAccessKeyHandlerFunc func(DeleteAccessKeyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteAccessKeyHandlerFunc) Handle(params DeleteAccessKeyParams) middleware.Responder {
	return fn(params)
}

// DeleteAccessKeyHandler interface for that can handle valid delete access key params
type DeleteAccessKeyHandler interface {
	Handle(DeleteAccessKeyParams) middleware.Responder
}

// NewDeleteAccessKey creates a new http.Handler for the delete access key operation
func NewDeleteAccessKey(ctx *middleware.Context, handler DeleteAccessKeyHandler) *DeleteAccessKey {
	return &DeleteAccessKey{Context: ctx, Handler: handler}
}

/*DeleteAccessKey swagger:route DELETE /accesskeys/{key_id} AccessKeys deleteAccessKey

delete AccessKey

获取用户信息


*/
type DeleteAccessKey struct {
	Context *middleware.Context
	Handler DeleteAccessKeyHandler
}

func (o *DeleteAccessKey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDeleteAccessKeyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
