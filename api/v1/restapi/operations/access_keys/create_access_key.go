// Code generated by go-swagger; DO NOT EDIT.

package access_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateAccessKeyHandlerFunc turns a function with the right signature into a create access key handler
type CreateAccessKeyHandlerFunc func(CreateAccessKeyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateAccessKeyHandlerFunc) Handle(params CreateAccessKeyParams) middleware.Responder {
	return fn(params)
}

// CreateAccessKeyHandler interface for that can handle valid create access key params
type CreateAccessKeyHandler interface {
	Handle(CreateAccessKeyParams) middleware.Responder
}

// NewCreateAccessKey creates a new http.Handler for the create access key operation
func NewCreateAccessKey(ctx *middleware.Context, handler CreateAccessKeyHandler) *CreateAccessKey {
	return &CreateAccessKey{Context: ctx, Handler: handler}
}

/*CreateAccessKey swagger:route POST /accesskeys AccessKeys createAccessKey

create AccessKey

新增用户


*/
type CreateAccessKey struct {
	Context *middleware.Context
	Handler CreateAccessKeyHandler
}

func (o *CreateAccessKey) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateAccessKeyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
