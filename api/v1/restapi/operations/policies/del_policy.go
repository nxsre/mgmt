// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DelPolicyHandlerFunc turns a function with the right signature into a del policy handler
type DelPolicyHandlerFunc func(DelPolicyParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DelPolicyHandlerFunc) Handle(params DelPolicyParams) middleware.Responder {
	return fn(params)
}

// DelPolicyHandler interface for that can handle valid del policy params
type DelPolicyHandler interface {
	Handle(DelPolicyParams) middleware.Responder
}

// NewDelPolicy creates a new http.Handler for the del policy operation
func NewDelPolicy(ctx *middleware.Context, handler DelPolicyHandler) *DelPolicy {
	return &DelPolicy{Context: ctx, Handler: handler}
}

/*DelPolicy swagger:route DELETE /policies/{id} Policies delPolicy

get Policy

删除IAM策略


*/
type DelPolicy struct {
	Context *middleware.Context
	Handler DelPolicyHandler
}

func (o *DelPolicy) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDelPolicyParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
