// Code generated by go-swagger; DO NOT EDIT.

package policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/soopsio/mgmt/api/v1/models"
)

// NewCreatePolicyParams creates a new CreatePolicyParams object
// with the default values initialized.
func NewCreatePolicyParams() CreatePolicyParams {
	var ()
	return CreatePolicyParams{}
}

// CreatePolicyParams contains all the bound params for the create policy operation
// typically these are obtained from a http.Request
//
// swagger:parameters createPolicy
type CreatePolicyParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: query
	*/
	AccessKeyID string
	/*
	  Required: true
	  In: query
	*/
	Signature string
	/*
	  Required: true
	  In: query
	*/
	SignatureMethod string
	/*
	  Required: true
	  In: query
	*/
	SignatureNonce string
	/*
	  Required: true
	  In: query
	*/
	SignatureVersion string
	/*
	  Required: true
	  In: query
	*/
	Timestamp string
	/*
	  Required: true
	  In: query
	*/
	Version string
	/*
	  Required: true
	  In: body
	*/
	PolicyData *models.Policy
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CreatePolicyParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAccessKeyID, qhkAccessKeyID, _ := qs.GetOK("AccessKeyId")
	if err := o.bindAccessKeyID(qAccessKeyID, qhkAccessKeyID, route.Formats); err != nil {
		res = append(res, err)
	}

	qSignature, qhkSignature, _ := qs.GetOK("Signature")
	if err := o.bindSignature(qSignature, qhkSignature, route.Formats); err != nil {
		res = append(res, err)
	}

	qSignatureMethod, qhkSignatureMethod, _ := qs.GetOK("SignatureMethod")
	if err := o.bindSignatureMethod(qSignatureMethod, qhkSignatureMethod, route.Formats); err != nil {
		res = append(res, err)
	}

	qSignatureNonce, qhkSignatureNonce, _ := qs.GetOK("SignatureNonce")
	if err := o.bindSignatureNonce(qSignatureNonce, qhkSignatureNonce, route.Formats); err != nil {
		res = append(res, err)
	}

	qSignatureVersion, qhkSignatureVersion, _ := qs.GetOK("SignatureVersion")
	if err := o.bindSignatureVersion(qSignatureVersion, qhkSignatureVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qTimestamp, qhkTimestamp, _ := qs.GetOK("Timestamp")
	if err := o.bindTimestamp(qTimestamp, qhkTimestamp, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("Version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Policy
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("policyData", "body"))
			} else {
				res = append(res, errors.NewParseError("policyData", "body", "", err))
			}

		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.PolicyData = &body
			}
		}

	} else {
		res = append(res, errors.Required("policyData", "body"))
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreatePolicyParams) bindAccessKeyID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("AccessKeyId", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("AccessKeyId", "query", raw); err != nil {
		return err
	}

	o.AccessKeyID = raw

	return nil
}

func (o *CreatePolicyParams) bindSignature(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Signature", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Signature", "query", raw); err != nil {
		return err
	}

	o.Signature = raw

	return nil
}

func (o *CreatePolicyParams) bindSignatureMethod(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("SignatureMethod", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("SignatureMethod", "query", raw); err != nil {
		return err
	}

	o.SignatureMethod = raw

	return nil
}

func (o *CreatePolicyParams) bindSignatureNonce(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("SignatureNonce", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("SignatureNonce", "query", raw); err != nil {
		return err
	}

	o.SignatureNonce = raw

	return nil
}

func (o *CreatePolicyParams) bindSignatureVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("SignatureVersion", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("SignatureVersion", "query", raw); err != nil {
		return err
	}

	o.SignatureVersion = raw

	return nil
}

func (o *CreatePolicyParams) bindTimestamp(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Timestamp", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Timestamp", "query", raw); err != nil {
		return err
	}

	o.Timestamp = raw

	return nil
}

func (o *CreatePolicyParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("Version", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if err := validate.RequiredString("Version", "query", raw); err != nil {
		return err
	}

	o.Version = raw

	return nil
}
