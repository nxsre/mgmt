// AUTOGENERATED FILE: easyjson marshaler/unmarshalers.

package message

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage(in *jlexer.Lexer, out *MsgContent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		case "task_name":
			out.TaskName = string(in.String())
		case "sequnce":
			out.Sequnce = string(in.String())
		case "timestamp":
			out.TimeStamp = string(in.String())
		case "module":
			out.Module = string(in.String())
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage(out *jwriter.Writer, in MsgContent) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"host\":")
	out.String(string(in.Host))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"msg\":")
	out.String(string(in.Msg))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"task_name\":")
	out.String(string(in.TaskName))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"sequnce\":")
	out.String(string(in.Sequnce))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"timestamp\":")
	out.String(string(in.TimeStamp))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"module\":")
	out.String(string(in.Module))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"status\":")
	out.String(string(in.Status))
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v MsgContent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MsgContent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MsgContent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MsgContent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage(l, v)
}
func easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage1(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "task_id":
			out.TaskID = string(in.String())
		case "type":
			out.Type = string(in.String())
		case "content":
			(out.Content).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage1(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"task_id\":")
	out.String(string(in.TaskID))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"type\":")
	out.String(string(in.Type))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"content\":")
	(in.Content).MarshalEasyJSON(out)
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson3bd68309EncodeLiepinPubOpsInsAnsibleInternalPipeMessage1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson3bd68309DecodeLiepinPubOpsInsAnsibleInternalPipeMessage1(l, v)
}
