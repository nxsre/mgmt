// AUTOGENERATED FILE: easyjson marshaller/unmarshallers.

package vault

import (
	json "encoding/json"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

var _ = json.RawMessage{} // suppress unused package warning

func easyjson_3eb06cba_decode_testapp_ansible_vault_Sshotpcred(in *jlexer.Lexer, out *Sshotpcred) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "lease_id":
			out.LeaseId = string(in.String())
		case "lease_duration":
			out.LeaseDuration = int(in.Int())
		case "renewable":
			out.Renewable = bool(in.Bool())
		case "data":
			(out.OTPData).UnmarshalEasyJSON(in)
		case "warnings":
			out.Warnings = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_3eb06cba_encode_testapp_ansible_vault_Sshotpcred(out *jwriter.Writer, in Sshotpcred) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lease_id\":")
	out.String(string(in.LeaseId))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"lease_duration\":")
	out.Int(int(in.LeaseDuration))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"renewable\":")
	out.Bool(bool(in.Renewable))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"data\":")
	(in.OTPData).MarshalEasyJSON(out)
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"warnings\":")
	out.String(string(in.Warnings))
	out.RawByte('}')
}
func (v Sshotpcred) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_3eb06cba_encode_testapp_ansible_vault_Sshotpcred(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Sshotpcred) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_3eb06cba_encode_testapp_ansible_vault_Sshotpcred(w, v)
}
func (v *Sshotpcred) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_3eb06cba_decode_testapp_ansible_vault_Sshotpcred(&r, v)
	return r.Error()
}
func (v *Sshotpcred) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_3eb06cba_decode_testapp_ansible_vault_Sshotpcred(l, v)
}
func easyjson_3eb06cba_decode_testapp_ansible_vault_Otpdata(in *jlexer.Lexer, out *Otpdata) {
	if in.IsNull() {
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ip":
			out.IP = string(in.String())
		case "key":
			out.Key = string(in.String())
		case "key_type":
			out.KeyType = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "username":
			out.Username = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
}
func easyjson_3eb06cba_encode_testapp_ansible_vault_Otpdata(out *jwriter.Writer, in Otpdata) {
	out.RawByte('{')
	first := true
	_ = first
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"ip\":")
	out.String(string(in.IP))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"key\":")
	out.String(string(in.Key))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"key_type\":")
	out.String(string(in.KeyType))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"port\":")
	out.Int(int(in.Port))
	if !first {
		out.RawByte(',')
	}
	first = false
	out.RawString("\"username\":")
	out.String(string(in.Username))
	out.RawByte('}')
}
func (v Otpdata) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson_3eb06cba_encode_testapp_ansible_vault_Otpdata(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}
func (v Otpdata) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson_3eb06cba_encode_testapp_ansible_vault_Otpdata(w, v)
}
func (v *Otpdata) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson_3eb06cba_decode_testapp_ansible_vault_Otpdata(&r, v)
	return r.Error()
}
func (v *Otpdata) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson_3eb06cba_decode_testapp_ansible_vault_Otpdata(l, v)
}
